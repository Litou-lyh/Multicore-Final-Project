name: CI Build
on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:

    runs-on:  ${{ matrix.os }}
    strategy:
      fail-fast: false
      # explicit include-based build matrix, of known valid options
      matrix:
        include:
          # 22.04 supports CUDA 11.7+
          - os: ubuntu-22.04
            cuda: "12.0"
            gcc: 11
          - os: ubuntu-22.04
            cuda: "11.8"
            gcc: 10
    env:
      build_dir: "build_dir"
      config: "Release"

    steps:
    - uses: actions/checkout@v3
    
    - name: Install cuda
      env:
        cuda: ${{ matrix.cuda }}
      run: |
        chmod +x ./scripts/actions/install_cuda_ubuntu.sh
        ./scripts/actions/install_cuda_ubuntu.sh
      shell: bash
            
    # Specify the correct host compilers
    - name: Install/Select gcc and g++ 
      run: |
        sudo apt-get install -y gcc-${{ matrix.gcc }} g++-${{ matrix.gcc }}
        echo "CC=/usr/bin/gcc-${{ matrix.gcc }}" >> $GITHUB_ENV
        echo "CXX=/usr/bin/g++-${{ matrix.gcc }}" >> $GITHUB_ENV
        echo "CUDAHOSTCXX=/usr/bin/g++-${{ matrix.gcc }}" >> $GITHUB_ENV
    - name: Fetch opencv and opencv_contrib
      run: |
        git clone https://github.com/opencv/opencv.git 
        git clone https://github.com/opencv/opencv_contrib.git

    - name: Configure cmake
      id: configure
      run: cmake . -B ${{ env.build_dir }} -DCMAKE_BUILD_TYPE=${{ env.config }}

    - name: Configure Error Processing
      if: ${{ failure() && steps.configure.outcome == 'failure' }}
      run: |
          if [[ -d "${{ env.build_dir }}" ]]; then
            pushd "${{ env.build_dir }}"
            if [[ -f "CMakeFiles/CMakeOutput.log" ]]; then
              echo "---- CMakeFiles/CMakeOutput.log"
              cat CMakeFiles/CMakeOutput.log
              echo "----"
            fi
            if [[ -f "CMakeFiles/CMakeError.log" ]]; then
              echo "---- CMakeFiles/CMakeError.log"
              cat CMakeFiles/CMakeError.log
              echo "----"
            fi
          fi

    - name: Install dependency packages
      run: |
        sudo sed -i -E 's|^deb ([^ ]+) (.*)$|deb [arch=amd64] \1 \2\ndeb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports/ \2|' /etc/apt/sources.list
        sudo dpkg --add-architecture arm64
        sudo apt-get update
        sudo apt-get install -y --no-install-recommends \
                crossbuild-essential-arm64 \
                git \
                cmake \
                python3-pip\
                libpython2-dev \
                libpython2-dev:arm64  \
                python3-numpy

   

    - name: Configure and Build Opencv
      run: |
        mkdir cv_build
        cd cv_build
        cmake -D CMAKE_BUILD_TYPE=Release -D CMAKE_INSTALL_PREFIX=/usr/local  -D OPENCV_EXTRA_MODULES_PATH=../opencv_contrib/modules/ -D WITH_TBB=OFF  -D WITH_CUDA=OFF -D BUILD_opencv_gpu=OFF -D BUILD_opencv_gpuarithm=OFF -D OPENCV_GENERATE_PKGCONFIG=ON ../opencv
        make -j$(nproc --all)
        sudo make install

    - name: Build 
      run: |
        mkdir build
        cd build
        cmake ..
        make
        ./ORBExtractor ../train4.jpg ../keypoints.txt descriptor_test.txt
    
    - name: Compare results
      run: |
        chmod +x ./compareOutput.sh
        ./compareOutput.sh
        
        